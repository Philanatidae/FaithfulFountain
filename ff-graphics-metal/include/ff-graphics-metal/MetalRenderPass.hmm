/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

#ifndef _FAITHFUL_FOUNTAIN_METAL_GRAPHICS_METAL_RENDER_PASS_DEVICE_HPP
#define _FAITHFUL_FOUNTAIN_METAL_GRAPHICS_METAL_RENDER_PASS_DEVICE_HPP

#import <Metal/Metal.h>

#include <ff/graphics/IRenderPass.hpp>

#include <ff-graphics-metal/MetalGraphicsDevice.hmm>

#include <unordered_map>
#include <memory>

namespace ff {
    class MetalShader;

    class MetalRenderPass : public IRenderPass {
    public:
        MetalRenderPass(MetalGraphicsDevice* const& graphicsDevice,
            std::vector<std::pair<ResourceHandle<ColorTexture>,
                RenderTargetColorAttachmentOptions>> const& colorTargets,
            std::optional<std::pair<ResourceHandle<DepthTexture>, RenderTargetDepthAttachmentOptions>> const& depthTarget);
        virtual ~MetalRenderPass();

        id<MTLRenderCommandEncoder> getMetalCommandEncoder();

    protected:
        void setStateImpl(const std::shared_ptr<IRenderState>& renderState) override;

        void setCullModeImpl(const CullMode& cullMode) override;

        void setViewportImpl(int const& x, int const& y,
            int const& width, int const& height) override;
        void setScissorRectImpl(int const& x, int const& y,
            int const& width, int const& height) override;

        void setTextureImpl(const ResourceHandle<ColorTexture> &texture,
            const int &slot = 0) override;
        void setSamplerStateImpl(const std::shared_ptr<ISamplerState>& samplerState,
            const int& slot = 0) override;

        void setDepthStencilStateImpl(const std::shared_ptr<IDepthStencilState>& depthStencilState) override;

        void setVertexBufferImpl(const std::shared_ptr<IVertexBuffer>& vertexBuffer,
            const int& slot = 0) override;
        void setVertexBufferOffsetImpl(const int& slot,
            const int& offset) override;

        void setUniformBufferImpl(const std::shared_ptr<IUniformBuffer>& uniformBuffer,
            const int& slot) override;

        void drawPrimitivesImpl(const RenderPrimitives& primitiveType,
            const int& count,
            const int& start = 0) override;
            
        void drawIndexedPrimitivesImpl(const RenderPrimitives& primitiveType,
            const std::shared_ptr<IIndexBuffer>& indexBuffer,
            const int& count,
            const int& start = 0) override;

        void endImpl() override;

    private:
        MetalGraphicsDevice* const _graphicsDevice;
        std::shared_ptr<MetalShader> _currentShader;

        id<MTLRenderCommandEncoder> _commandEncoder;

        std::unordered_map<int, ResourceHandle<ColorTexture>> _boundTextures;
        std::unordered_map<int, ResourceHandle<ColorTexture>> _vertexTextures;
        std::unordered_map<int, ResourceHandle<ColorTexture>> _fragmentTextures;

        std::unordered_map<int, std::shared_ptr<ISamplerState>> _boundSamplerStates;
        std::unordered_map<int, std::shared_ptr<ISamplerState>> _vertexSamplerStates;
        std::unordered_map<int, std::shared_ptr<ISamplerState>> _fragmentSamplerStates;

        std::unordered_map<int, std::shared_ptr<IUniformBuffer>> _boundUniformBuffers;
        std::unordered_map<int, std::shared_ptr<IUniformBuffer>> _vertexUniformBuffers;
        std::unordered_map<int, std::shared_ptr<IUniformBuffer>> _fragmentUniformBuffers;
    };
}

#endif
